openapi: 3.0.0
info:
  title: Prisma User API
  version: 1.0.0
  description: API pour gérer les utilisateurs et leurs posts
servers:
  - url: http://localhost:3000
    description: Serveur local
paths:
  /users:
    get:
      summary: Récupère tous les utilisateurs
      responses:
        "200":
          description: Liste des utilisateurs avec leurs posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserWithPosts"
        "204":
          description: Aucun utilisateur trouvé
    post:
      summary: Crée un nouvel utilisateur
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
      responses:
        "201":
          description: Utilisateur créé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Non autorisé (token manquant ou invalide)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
  /users/{userId}:
    get:
      summary: Récupère un utilisateur par son ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ID de l'utilisateur
      responses:
        "200":
          description: Utilisateur trouvé avec ses posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithPosts"
        "404":
          description: Utilisateur non trouvé
          content:
            text/plain:
              schema:
                type: string
                example: Utilisateur non trouvé

  /pokemon-cards:
    get:
      summary: Récupère tous les pokemons
      responses:
        "200":
          description: Liste des pokemons avec toutes leurs propriétés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PokemonCard"

  /pokemon-cards/{pokemonCardId}:
    get:
      summary: Récupère un pokemon par son ID
      parameters:
        - name: pokemonCardId
          in: path
          required: true
          schema:
            type: integer
          description: ID du pokemon
      responses:
        "200":
          description: Pokemon trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PokemonCard"
        "404":
          description: Pokemon non trouvé
          content:
            text/plain:
              schema:
                type: string
                example: Pokemon non trouvé

  /pokemon-cards/create:
    get:
      summary: Créer un pokemons
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PokemonCard"
      responses:
        "200":
          description: Créerun pokemon avec toutes les propriétés renseignées
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PokemonCard"
        "404":
          description: Pokemon non créé
          content:
            text/plain:
              schema:
                type: string
                example: Pokemon non créé
    # post:
    #   summary: Crée un nouvel utilisateur
    #   security:
    #     - bearerAuth: []
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           type: object
    #           properties:
    #             name:
    #               type: string
    #               example: John Doe
    #   responses:
    #     "201":
    #       description: Utilisateur créé
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/PokemonCard"
    #     "401":
    #       description: Non autorisé (token manquant ou invalide)
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               error:
    #                 type: string
    #                 example: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        pasword:
          type: string
          example: password123#
    PokemonCard:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Carabaffe
        pokedexld:
          type: integer
          example: 8
        size:
          type: integer
          example: 1

        typeID:
          type: integer
          example: 3
        lifePoint:
          type: float
          example: 143
        weight:
          type: float
          example: 22.5
        imageUrl:
          type: string
          example: https://assets.pokemon.com/assets/cms2/img/pokedex/full/008.png

    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: My First Post
        authorId:
          type: integer
          example: 1
    UserWithPosts:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            posts:
              type: array
              items:
                $ref: "#/components/schemas/Post"
