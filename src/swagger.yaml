openapi: 3.0.0
info:
  title: Prisma User API
  version: 1.0.0
  description: API pour gérer les utilisateurs et leurs posts
servers:
  - url: http://localhost:3000
    description: Serveur local

tags:
  - name: User
  - name: Pokemon
paths:
  /users:
    get:
      tags:
        - User
      summary: Récupère tous les utilisateurs
      responses:
        "200":
          description: Liste des utilisateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        # "204":
        #   description: Aucun utilisateur trouvé
    post:
      tags:
        - User
      summary: Crée un nouvel utilisateur
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        "201":
          description: Utilisateur créé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Non autorisé
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
        "400":
          description: Impossible de créer l'utilisateur, email déjà existant
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email déjà existant
  # /users/{userId}:
  #   get:
  #     summary: Récupère un utilisateur par son ID
  #     parameters:
  #       - name: userId
  #         in: path
  #         required: true
  #         schema:
  #           type: integer
  #         description: ID de l'utilisateur
  #     responses:
  #       "200":
  #         description: Utilisateur trouvé avec ses posts
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/UserWithPosts"
  #       "404":
  #         description: Utilisateur non trouvé
  #         content:
  #           text/plain:
  #             schema:
  #               type: string
  #               example: Utilisateur non trouvé

  /pokemon-cards:
    get:
      tags:
        - Pokemon
      summary: Récupère tous les pokemons
      responses:
        "200":
          description: Liste des pokemons avec toutes leurs propriétés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PokemonCard"

  /pokemon-cards/{pokemonCardId}:
    get:
      tags:
        - Pokemon
      summary: Récupère un pokemon par son ID
      parameters:
        - name: pokemonCardId
          in: path
          required: true
          schema:
            type: integer
          description: ID du pokemon
      responses:
        "200":
          description: Pokemon trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PokemonCard"
        "404":
          description: Pokemon non trouvé
          content:
            text/plain:
              schema:
                type: string
                example: Pokemon non trouvé

  /pokemon-cards/create:
    post:
      tags:
        - Pokemon
      summary: Créer un pokemons
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PokemonCard"
      responses:
        "200":
          description: Créerun pokemon avec toutes les propriétés renseignées
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PokemonCard"
        "404":
          description: Pokemon non créé
          content:
            text/plain:
              schema:
                type: string
                example: Pokemon non créé

  /pokemon-cards/delete/{pokemonCardId}:
    delete:
      tags:
        - Pokemon
      summary: Supprimer un pokemon par son ID
      security:
        - bearerAuth: []
      parameters:
        - name: pokemonCardId
          in: path
          required: true
          schema:
            type: integer
          description: ID du pokemon
      responses:
        "200":
          description: Pokemon supprimé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PokemonCard"
        "404":
          description: Pokemon impossible à supprimer
          content:
            text/plain:
              schema:
                type: string
                example: Impossible de supprimer le pokemon

  /pokemon-cards/update/{pokemonCardId}:
    patch:
      tags:
        - Pokemon
      summary: Mettre à jour un pokemon par son ID
      security:
        - bearerAuth: []
      parameters:
        - name: pokemonCardId
          in: path
          required: true
          schema:
            type: integer
          description: ID du pokemon
      responses:
        "200":
          description: Pokemon à mettre à jour
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PokemonCard"
        "404":
          description: Pokemon non trouvé
          content:
            text/plain:
              schema:
                type: string
                example: Pokemon non trouvé
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: user1@mail.com
        pasword:
          type: string
          example: password123#
    PokemonCard:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Carabaffe
        pokedexld:
          type: integer
          example: 8
        size:
          type: integer
          example: 1

        typeID:
          type: integer
          example: 3
        lifePoint:
          type: float
          example: 143
        weight:
          type: float
          example: 22.5
        imageUrl:
          type: string
          example: https://assets.pokemon.com/assets/cms2/img/pokedex/full/008.png

    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: My First Post
        authorId:
          type: integer
          example: 1
    UserWithPosts:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            posts:
              type: array
              items:
                $ref: "#/components/schemas/Post"
